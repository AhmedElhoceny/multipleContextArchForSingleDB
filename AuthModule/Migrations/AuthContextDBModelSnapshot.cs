// <auto-generated />
using System;
using AuthModule.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AuthModule.Migrations
{
    [DbContext(typeof(AuthContextDB))]
    partial class AuthContextDBModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SharedHelpers.Models.GeneralEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("CompId")
                        .HasColumnType("bigint");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("GeneralEntity");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("AuthModule.Models.Company", b =>
                {
                    b.HasBaseType("SharedHelpers.Models.GeneralEntity");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Auth_Companies");
                });

            modelBuilder.Entity("AuthModule.Models.Permission", b =>
                {
                    b.HasBaseType("SharedHelpers.Models.GeneralEntity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Auth_Permissions");
                });

            modelBuilder.Entity("AuthModule.Models.Role", b =>
                {
                    b.HasBaseType("SharedHelpers.Models.GeneralEntity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Auth_Roles");
                });

            modelBuilder.Entity("AuthModule.Models.User", b =>
                {
                    b.HasBaseType("SharedHelpers.Models.GeneralEntity");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEmailConfirmaed")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassWord")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Auth_Users");
                });

            modelBuilder.Entity("AuthModule.Models.UserPermission", b =>
                {
                    b.HasBaseType("SharedHelpers.Models.GeneralEntity");

                    b.Property<int>("Permission_Id")
                        .HasColumnType("int");

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.HasIndex("Permission_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("Auth_UserPermissions");
                });

            modelBuilder.Entity("AuthModule.Models.UserRole", b =>
                {
                    b.HasBaseType("SharedHelpers.Models.GeneralEntity");

                    b.Property<int>("Role_Id")
                        .HasColumnType("int");

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.HasIndex("Role_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("Auth_UserRoles");
                });

            modelBuilder.Entity("AuthModule.Models.UserToken", b =>
                {
                    b.HasBaseType("SharedHelpers.Models.GeneralEntity");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.HasIndex("User_Id");

                    b.ToTable("Auth_UserTokens");
                });

            modelBuilder.Entity("AuthModule.Models.Company", b =>
                {
                    b.HasOne("SharedHelpers.Models.GeneralEntity", null)
                        .WithOne()
                        .HasForeignKey("AuthModule.Models.Company", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AuthModule.Models.Permission", b =>
                {
                    b.HasOne("SharedHelpers.Models.GeneralEntity", null)
                        .WithOne()
                        .HasForeignKey("AuthModule.Models.Permission", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AuthModule.Models.Role", b =>
                {
                    b.HasOne("SharedHelpers.Models.GeneralEntity", null)
                        .WithOne()
                        .HasForeignKey("AuthModule.Models.Role", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AuthModule.Models.User", b =>
                {
                    b.HasOne("SharedHelpers.Models.GeneralEntity", null)
                        .WithOne()
                        .HasForeignKey("AuthModule.Models.User", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AuthModule.Models.UserPermission", b =>
                {
                    b.HasOne("SharedHelpers.Models.GeneralEntity", null)
                        .WithOne()
                        .HasForeignKey("AuthModule.Models.UserPermission", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthModule.Models.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("Permission_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AuthModule.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuthModule.Models.UserRole", b =>
                {
                    b.HasOne("SharedHelpers.Models.GeneralEntity", null)
                        .WithOne()
                        .HasForeignKey("AuthModule.Models.UserRole", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthModule.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("Role_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AuthModule.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuthModule.Models.UserToken", b =>
                {
                    b.HasOne("SharedHelpers.Models.GeneralEntity", null)
                        .WithOne()
                        .HasForeignKey("AuthModule.Models.UserToken", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthModule.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
